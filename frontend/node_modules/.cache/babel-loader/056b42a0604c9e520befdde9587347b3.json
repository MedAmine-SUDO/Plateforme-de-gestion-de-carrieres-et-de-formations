{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst universal_cookie_1 = __importDefault(require(\"universal-cookie\"));\n\nconst defaultOptions = {\n  storageAliases: {\n    accessToken: \"accessToken\",\n    idToken: \"idToken\",\n    refreshToken: \"refreshToken\",\n    token: \"token\"\n  }\n};\n\nconst cookieStorage = (options = {}) => {\n  const {\n    req,\n    storageAliases\n  } = Object.assign({}, defaultOptions, options);\n  const cookies = new universal_cookie_1.default(req ? req.headers.cookie : undefined);\n  return {\n    get: () => {\n      const allCookies = cookies.getAll();\n      return {\n        accessToken: allCookies[storageAliases.accessToken],\n        idToken: allCookies[storageAliases.idToken],\n        refreshToken: allCookies[storageAliases.refreshToken],\n        token: allCookies[storageAliases.token]\n      };\n    },\n    remove: () => {\n      cookies.remove(storageAliases.accessToken);\n      cookies.remove(storageAliases.idToken);\n      cookies.remove(storageAliases.refreshToken);\n      cookies.remove(storageAliases.token);\n    },\n    set: ({\n      accessToken,\n      idToken,\n      refreshToken,\n      token\n    }, expires) => {\n      if (accessToken) {\n        cookies.set(storageAliases.accessToken, accessToken, {\n          expires\n        });\n      }\n\n      if (idToken) {\n        cookies.set(storageAliases.idToken, idToken, {\n          expires\n        });\n      }\n\n      if (refreshToken) {\n        cookies.set(storageAliases.refreshToken, refreshToken, {\n          expires\n        });\n      }\n\n      if (token) {\n        cookies.set(storageAliases.token, token, {\n          expires\n        });\n      }\n    }\n  };\n};\n\ncookieStorage.get = (options = {}) => {\n  return cookieStorage(options).get();\n};\n\ncookieStorage.set = (tokens, expires) => {\n  return cookieStorage().set(tokens, expires);\n};\n\ncookieStorage.remove = () => {\n  return cookieStorage().remove();\n};\n\nexports.default = cookieStorage;","map":{"version":3,"sources":["../../src/storage/cookies.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,kBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAkBA,MAAM,cAAc,GAAyB;AAC3C,EAAA,cAAc,EAAE;AACd,IAAA,WAAW,EAAE,aADC;AAEd,IAAA,OAAO,EAAE,SAFK;AAGd,IAAA,YAAY,EAAE,cAHA;AAId,IAAA,KAAK,EAAE;AAJO;AAD2B,CAA7C;;AASA,MAAM,aAAa,GAAG,CAAC,OAAA,GAAyC,EAA1C,KAAgD;AACpE,QAAM;AAAE,IAAA,GAAF;AAAO,IAAA;AAAP,MAAuB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,cAAR,EAA2B,OAA3B,CAA7B;AAEA,QAAM,OAAO,GAAG,IAAI,kBAAA,CAAA,OAAJ,CAAY,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,MAAf,GAAwB,SAAvC,CAAhB;AAEA,SAAO;AACL,IAAA,GAAG,EAAE,MAAa;AAChB,YAAM,UAAU,GAAG,OAAO,CAAC,MAAR,EAAnB;AACA,aAAO;AACL,QAAA,WAAW,EAAE,UAAU,CAAC,cAAc,CAAC,WAAhB,CADlB;AAEL,QAAA,OAAO,EAAE,UAAU,CAAC,cAAc,CAAC,OAAhB,CAFd;AAGL,QAAA,YAAY,EAAE,UAAU,CAAC,cAAc,CAAC,YAAhB,CAHnB;AAIL,QAAA,KAAK,EAAE,UAAU,CAAC,cAAc,CAAC,KAAhB;AAJZ,OAAP;AAMD,KATI;AAWL,IAAA,MAAM,EAAE,MAAK;AACX,MAAA,OAAO,CAAC,MAAR,CAAe,cAAc,CAAC,WAA9B;AACA,MAAA,OAAO,CAAC,MAAR,CAAe,cAAc,CAAC,OAA9B;AACA,MAAA,OAAO,CAAC,MAAR,CAAe,cAAc,CAAC,YAA9B;AACA,MAAA,OAAO,CAAC,MAAR,CAAe,cAAc,CAAC,KAA9B;AACD,KAhBI;AAkBL,IAAA,GAAG,EAAE,CACH;AAAE,MAAA,WAAF;AAAe,MAAA,OAAf;AAAwB,MAAA,YAAxB;AAAsC,MAAA;AAAtC,KADG,EAEH,OAFG,KAGD;AACF,UAAI,WAAJ,EAAiB;AACf,QAAA,OAAO,CAAC,GAAR,CAAY,cAAc,CAAC,WAA3B,EAAwC,WAAxC,EAAqD;AAAE,UAAA;AAAF,SAArD;AACD;;AAED,UAAI,OAAJ,EAAa;AACX,QAAA,OAAO,CAAC,GAAR,CAAY,cAAc,CAAC,OAA3B,EAAoC,OAApC,EAA6C;AAAE,UAAA;AAAF,SAA7C;AACD;;AAED,UAAI,YAAJ,EAAkB;AAChB,QAAA,OAAO,CAAC,GAAR,CAAY,cAAc,CAAC,YAA3B,EAAyC,YAAzC,EAAuD;AAAE,UAAA;AAAF,SAAvD;AACD;;AAED,UAAI,KAAJ,EAAW;AACT,QAAA,OAAO,CAAC,GAAR,CAAY,cAAc,CAAC,KAA3B,EAAkC,KAAlC,EAAyC;AAAE,UAAA;AAAF,SAAzC;AACD;AACF;AArCI,GAAP;AAuCD,CA5CD;;AA8CA,aAAa,CAAC,GAAd,GAAoB,CAAC,OAAA,GAAyC,EAA1C,KAAgD;AAClE,SAAO,aAAa,CAAC,OAAD,CAAb,CAAuB,GAAvB,EAAP;AACD,CAFD;;AAIA,aAAa,CAAC,GAAd,GAAoB,CAAC,MAAD,EAAiB,OAAjB,KAAmC;AACrD,SAAO,aAAa,GAAG,GAAhB,CAAoB,MAApB,EAA4B,OAA5B,CAAP;AACD,CAFD;;AAIA,aAAa,CAAC,MAAd,GAAuB,MAAK;AAC1B,SAAO,aAAa,GAAG,MAAhB,EAAP;AACD,CAFD;;AAIA,OAAA,CAAA,OAAA,GAAe,aAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst universal_cookie_1 = __importDefault(require(\"universal-cookie\"));\nconst defaultOptions = {\n    storageAliases: {\n        accessToken: \"accessToken\",\n        idToken: \"idToken\",\n        refreshToken: \"refreshToken\",\n        token: \"token\"\n    }\n};\nconst cookieStorage = (options = {}) => {\n    const { req, storageAliases } = Object.assign({}, defaultOptions, options);\n    const cookies = new universal_cookie_1.default(req ? req.headers.cookie : undefined);\n    return {\n        get: () => {\n            const allCookies = cookies.getAll();\n            return {\n                accessToken: allCookies[storageAliases.accessToken],\n                idToken: allCookies[storageAliases.idToken],\n                refreshToken: allCookies[storageAliases.refreshToken],\n                token: allCookies[storageAliases.token]\n            };\n        },\n        remove: () => {\n            cookies.remove(storageAliases.accessToken);\n            cookies.remove(storageAliases.idToken);\n            cookies.remove(storageAliases.refreshToken);\n            cookies.remove(storageAliases.token);\n        },\n        set: ({ accessToken, idToken, refreshToken, token }, expires) => {\n            if (accessToken) {\n                cookies.set(storageAliases.accessToken, accessToken, { expires });\n            }\n            if (idToken) {\n                cookies.set(storageAliases.idToken, idToken, { expires });\n            }\n            if (refreshToken) {\n                cookies.set(storageAliases.refreshToken, refreshToken, { expires });\n            }\n            if (token) {\n                cookies.set(storageAliases.token, token, { expires });\n            }\n        }\n    };\n};\ncookieStorage.get = (options = {}) => {\n    return cookieStorage(options).get();\n};\ncookieStorage.set = (tokens, expires) => {\n    return cookieStorage().set(tokens, expires);\n};\ncookieStorage.remove = () => {\n    return cookieStorage().remove();\n};\nexports.default = cookieStorage;\n//# sourceMappingURL=cookies.js.map"]},"metadata":{},"sourceType":"script"}