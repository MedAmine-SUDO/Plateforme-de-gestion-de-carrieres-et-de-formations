{"ast":null,"code":"var _jsxFileName = \"/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/AdminDashboard/Content/FormationList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { formationDeleteData, formationGetAll, formationPostData, formationUpdateData } from \"../../../actions/FomationActions\";\nimport MaterialTable from \"material-table\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { stylesContent } from \"../styles/Styles\";\nimport { tableIcons } from \"../../tableFeatures/tableIcons\";\nimport NavPills from \"../../../components/NavPills/NavPills.js\";\nimport Dashboard from \"@material-ui/icons/Dashboard\";\nimport Schedule from \"@material-ui/icons/Schedule\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Check from \"@material-ui/icons/Check\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport SnackbarContent from \"../../../components/Snackbar/SnackbarContent.js\";\n\nfunction FormationList() {\n  const dispatch = useDispatch();\n  const formationData = useSelector(state => state.formation);\n  const [alert, setAlert] = useState(null);\n  const [alertAdd, setAlertAdd] = useState(null);\n  const [alertUpdate, setAlertUpdate] = useState(null);\n  const [alertDelete, setAlertDelete] = useState(null);\n  const [state, setState] = useState({\n    columns: [{\n      title: \"Id\",\n      field: \"id\"\n    }, {\n      title: \"Title\",\n      field: \"title\"\n    }, {\n      title: \"Description\",\n      field: \"description\"\n    }, //{ title: \"idFormateurs\", field: \"idFormateurs[0]\" },\n    {\n      title: \"Niveau\",\n      field: \"niveau\"\n    }, //{ title: \"Competence\", field: \"competence[0]\" },\n    {\n      title: \"Begin Date\",\n      field: \"beginDate\",\n      type: \"date\"\n    }, {\n      title: \"End Date\",\n      field: \"endDate\",\n      type: \"date\"\n    }, {\n      title: \"Hours\",\n      field: \"nbrHours\",\n      type: \"numeric\"\n    }, {\n      title: \"Price\",\n      field: \"price\",\n      type: \"numeric\"\n    }, {\n      title: \"Type\",\n      field: \"type\",\n      lookup: {\n        \"a distance\": \"a distance\",\n        presentiel: \"presentiel\"\n      }\n    }],\n    data: []\n  });\n  useEffect(() => {\n    dispatch(formationGetAll()).then(res => {\n      if (res) {\n        setState({\n          columns: state.columns,\n          data: res.data\n        });\n        setAlert(null);\n      } else setAlert( /*#__PURE__*/React.createElement(SnackbarContent, {\n        message: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }\n        }, \"WARNING ALERT:\"), \" Could not reach data... Refresh Page...\"),\n        close: true,\n        color: \"warning\",\n        icon: Warning,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }\n      }));\n    });\n  }, [dispatch, state.columns]);\n\n  const addFormation = newData => {\n    setAlert(null);\n    setAlertAdd(null);\n    setAlertUpdate(null);\n    setAlertDelete(null);\n\n    if (!newData.title || !newData.description || !newData.niveau || !newData.beginDate || !newData.endDate || !newData.nbrHours || !newData.type) {\n      setAlertAdd( /*#__PURE__*/React.createElement(SnackbarContent, {\n        message: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }\n        }, \"WARNING ALERT:\"), \" Empty field(s)...\"),\n        close: true,\n        color: \"warning\",\n        icon: Warning,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      let title = newData.title;\n      let description = newData.description;\n      let niveau = newData.niveau;\n      let beginDate = newData.beginDate;\n      let endDate = newData.endDate;\n      let nbrHours = newData.nbrHours;\n      let price = newData.price;\n      let type = newData.type;\n      dispatch(formationPostData({\n        title,\n        description,\n        niveau,\n        beginDate,\n        endDate,\n        nbrHours,\n        price,\n        type\n      })).then(res => {\n        if (!res) setAlertAdd( /*#__PURE__*/React.createElement(SnackbarContent, {\n          message: /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }\n          }, \"WARNING ALERT:\"), \" Bad Request...\"),\n          close: true,\n          color: \"warning\",\n          icon: Warning,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }\n        }));else setAlertAdd( /*#__PURE__*/React.createElement(SnackbarContent, {\n          message: /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }\n          }, \"SUCCESS ALERT:\"), \" Formation Added...\"),\n          close: true,\n          color: \"success\",\n          icon: Check,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }\n        }));\n      });\n    }\n  };\n\n  const updateFormation = (newData, oldData) => {\n    setAlert(null);\n    setAlertAdd(null);\n    setAlertUpdate(null);\n    setAlertDelete(null);\n    console.log(newData, oldData);\n\n    if (!newData.title || !newData.description || !newData.niveau || !newData.beginDate || !newData.endDate || !newData.nbrHours || !newData.type) {\n      setAlertUpdate( /*#__PURE__*/React.createElement(SnackbarContent, {\n        message: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }\n        }, \"WARNING ALERT:\"), \" Empty field(s)...\"),\n        close: true,\n        color: \"warning\",\n        icon: Warning,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      let id = oldData.id;\n      let title = newData.title;\n      let description = newData.description;\n      let niveau = newData.niveau;\n      let beginDate = newData.beginDate;\n      let endDate = newData.endDate;\n      let nbrHours = newData.nbrHours;\n      let price = newData.price;\n      let type = newData.type;\n      dispatch(formationUpdateData({\n        id,\n        title,\n        description,\n        niveau,\n        beginDate,\n        endDate,\n        nbrHours,\n        price,\n        type\n      })).then(res => {\n        if (!res) setAlertUpdate( /*#__PURE__*/React.createElement(SnackbarContent, {\n          message: /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 19\n            }\n          }, \"WARNING ALERT:\"), \" Bad Request...\"),\n          close: true,\n          color: \"warning\",\n          icon: Warning,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }\n        }));else setAlertUpdate( /*#__PURE__*/React.createElement(SnackbarContent, {\n          message: /*#__PURE__*/React.createElement(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 19\n            }\n          }, \"SUCCESS ALERT:\"), \" Formation Updated...\"),\n          close: true,\n          color: \"success\",\n          icon: Check,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }\n        }));\n      });\n    }\n  };\n\n  const deleteFormation = oldData => {\n    dispatch(formationDeleteData(oldData.id)).then(res => {\n      setAlert(null);\n      setAlertAdd(null);\n      setAlertUpdate(null);\n      setAlertDelete(null);\n      if (res) setAlertDelete( /*#__PURE__*/React.createElement(SnackbarContent, {\n        message: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 17\n          }\n        }, \"SUCCESS ALERT:\"), \" Formation Deleted...\"),\n        close: true,\n        color: \"success\",\n        icon: Check,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }\n      }));else setAlertDelete( /*#__PURE__*/React.createElement(SnackbarContent, {\n        message: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }\n        }, \"WARNING ALERT:\"), \" Server ERROR...\"),\n        close: true,\n        color: \"warning\",\n        icon: Warning,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n\n  if (formationData.loading) return /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 37\n    }\n  });else return /*#__PURE__*/React.createElement(React.Fragment, null, alert, alertAdd, alertUpdate, alertDelete, /*#__PURE__*/React.createElement(NavPills, {\n    color: \"adminDashboard\",\n    tabs: [{\n      tabButton: \"Formations List\",\n      tabIcon: Dashboard,\n      tabContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: \"Editable Example\",\n        columns: state.columns,\n        icons: tableIcons,\n        data: state.data,\n        editable: {\n          onRowAdd: newData => new Promise(resolve => {\n            resolve();\n            addFormation(newData);\n          }),\n          onRowUpdate: (newData, oldData) => new Promise(resolve => {\n            resolve();\n            updateFormation(newData, oldData);\n          }),\n          onRowDelete: oldData => new Promise(resolve => {\n            resolve();\n            deleteFormation(oldData);\n          })\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 19\n        }\n      }))\n    }, {\n      tabButton: \"Formations Settings\",\n      tabIcon: Schedule,\n      tabContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 19\n        }\n      }, \"Empty\"))\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  }));\n}\n\nFormationList.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(stylesContent)(FormationList);","map":{"version":3,"sources":["/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/AdminDashboard/Content/FormationList.js"],"names":["React","useState","useEffect","useSelector","useDispatch","formationDeleteData","formationGetAll","formationPostData","formationUpdateData","MaterialTable","PropTypes","withStyles","stylesContent","tableIcons","NavPills","Dashboard","Schedule","Warning","Check","CircularProgress","SnackbarContent","FormationList","dispatch","formationData","state","formation","alert","setAlert","alertAdd","setAlertAdd","alertUpdate","setAlertUpdate","alertDelete","setAlertDelete","setState","columns","title","field","type","lookup","presentiel","data","then","res","addFormation","newData","description","niveau","beginDate","endDate","nbrHours","price","updateFormation","oldData","console","log","id","deleteFormation","loading","tabButton","tabIcon","tabContent","onRowAdd","Promise","resolve","onRowUpdate","onRowDelete","propTypes","classes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  formationDeleteData,\n  formationGetAll,\n  formationPostData,\n  formationUpdateData,\n} from \"../../../actions/FomationActions\";\nimport MaterialTable from \"material-table\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { stylesContent } from \"../styles/Styles\";\nimport { tableIcons } from \"../../tableFeatures/tableIcons\";\nimport NavPills from \"../../../components/NavPills/NavPills.js\";\nimport Dashboard from \"@material-ui/icons/Dashboard\";\nimport Schedule from \"@material-ui/icons/Schedule\";\nimport Warning from \"@material-ui/icons/Warning\";\nimport Check from \"@material-ui/icons/Check\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport SnackbarContent from \"../../../components/Snackbar/SnackbarContent.js\";\n\nfunction FormationList() {\n  const dispatch = useDispatch();\n  const formationData = useSelector((state) => state.formation);\n  const [alert, setAlert] = useState(null);\n  const [alertAdd, setAlertAdd] = useState(null);\n  const [alertUpdate, setAlertUpdate] = useState(null);\n  const [alertDelete, setAlertDelete] = useState(null);\n  const [state, setState] = useState({\n    columns: [\n      { title: \"Id\", field: \"id\" },\n      { title: \"Title\", field: \"title\" },\n      { title: \"Description\", field: \"description\" },\n      //{ title: \"idFormateurs\", field: \"idFormateurs[0]\" },\n      { title: \"Niveau\", field: \"niveau\" },\n      //{ title: \"Competence\", field: \"competence[0]\" },\n      { title: \"Begin Date\", field: \"beginDate\", type: \"date\" },\n      { title: \"End Date\", field: \"endDate\", type: \"date\" },\n      { title: \"Hours\", field: \"nbrHours\", type: \"numeric\" },\n      { title: \"Price\", field: \"price\", type: \"numeric\" },\n      {\n        title: \"Type\",\n        field: \"type\",\n        lookup: { \"a distance\": \"a distance\", presentiel: \"presentiel\" },\n      },\n    ],\n    data: [],\n  });\n  useEffect(() => {\n    dispatch(formationGetAll()).then((res) => {\n      if (res) {\n        setState({\n          columns: state.columns,\n          data: res.data,\n        });\n        setAlert(null);\n      } else\n        setAlert(\n          <SnackbarContent\n            message={\n              <span>\n                <b>WARNING ALERT:</b> Could not reach data... Refresh Page...\n              </span>\n            }\n            close\n            color=\"warning\"\n            icon={Warning}\n          />\n        );\n    });\n  }, [dispatch, state.columns]);\n  const addFormation = (newData) => {\n    setAlert(null);\n    setAlertAdd(null);\n    setAlertUpdate(null);\n    setAlertDelete(null);\n    if (\n      !newData.title ||\n      !newData.description ||\n      !newData.niveau ||\n      !newData.beginDate ||\n      !newData.endDate ||\n      !newData.nbrHours ||\n      !newData.type\n    ) {\n      setAlertAdd(\n        <SnackbarContent\n          message={\n            <span>\n              <b>WARNING ALERT:</b> Empty field(s)...\n            </span>\n          }\n          close\n          color=\"warning\"\n          icon={Warning}\n        />\n      );\n    } else {\n      let title = newData.title;\n      let description = newData.description;\n      let niveau = newData.niveau;\n      let beginDate = newData.beginDate;\n      let endDate = newData.endDate;\n      let nbrHours = newData.nbrHours;\n      let price = newData.price;\n      let type = newData.type;\n      dispatch(\n        formationPostData({\n          title,\n          description,\n          niveau,\n          beginDate,\n          endDate,\n          nbrHours,\n          price,\n          type,\n        })\n      ).then((res) => {\n        if (!res)\n          setAlertAdd(\n            <SnackbarContent\n              message={\n                <span>\n                  <b>WARNING ALERT:</b> Bad Request...\n                </span>\n              }\n              close\n              color=\"warning\"\n              icon={Warning}\n            />\n          );\n        else\n          setAlertAdd(\n            <SnackbarContent\n              message={\n                <span>\n                  <b>SUCCESS ALERT:</b> Formation Added...\n                </span>\n              }\n              close\n              color=\"success\"\n              icon={Check}\n            />\n          );\n      });\n    }\n  };\n  const updateFormation = (newData, oldData) => {\n    setAlert(null);\n    setAlertAdd(null);\n    setAlertUpdate(null);\n    setAlertDelete(null);\n    console.log(newData, oldData)\n    if (\n      !newData.title ||\n      !newData.description ||\n      !newData.niveau ||\n      !newData.beginDate ||\n      !newData.endDate ||\n      !newData.nbrHours ||\n      !newData.type\n    ) {\n      setAlertUpdate(\n        <SnackbarContent\n          message={\n            <span>\n              <b>WARNING ALERT:</b> Empty field(s)...\n            </span>\n          }\n          close\n          color=\"warning\"\n          icon={Warning}\n        />\n      );\n    } else {\n      let id = oldData.id;\n      let title = newData.title;\n      let description = newData.description;\n      let niveau = newData.niveau;\n      let beginDate = newData.beginDate;\n      let endDate = newData.endDate;\n      let nbrHours = newData.nbrHours;\n      let price = newData.price;\n      let type = newData.type;\n      dispatch(\n        formationUpdateData({id,\n          title,\n          description,\n          niveau,\n          beginDate,\n          endDate,\n          nbrHours,\n          price,\n          type,\n        })\n      ).then((res) => {\n        if (!res)\n        setAlertUpdate(\n            <SnackbarContent\n              message={\n                <span>\n                  <b>WARNING ALERT:</b> Bad Request...\n                </span>\n              }\n              close\n              color=\"warning\"\n              icon={Warning}\n            />\n          );\n        else\n        setAlertUpdate(\n            <SnackbarContent\n              message={\n                <span>\n                  <b>SUCCESS ALERT:</b> Formation Updated...\n                </span>\n              }\n              close\n              color=\"success\"\n              icon={Check}\n            />\n          );\n      });\n    }\n  };\n  const deleteFormation = (oldData) => {\n    dispatch(formationDeleteData(oldData.id)).then((res) => {\n      setAlert(null);\n      setAlertAdd(null);\n      setAlertUpdate(null);\n      setAlertDelete(null);\n      if (res)\n        setAlertDelete(\n          <SnackbarContent\n            message={\n              <span>\n                <b>SUCCESS ALERT:</b> Formation Deleted...\n              </span>\n            }\n            close\n            color=\"success\"\n            icon={Check}\n          />\n        );\n      else\n        setAlertDelete(\n          <SnackbarContent\n            message={\n              <span>\n                <b>WARNING ALERT:</b> Server ERROR...\n              </span>\n            }\n            close\n            color=\"warning\"\n            icon={Warning}\n          />\n        );\n    });\n  };\n  if (formationData.loading) return <CircularProgress />;\n  else\n    return (\n      <>\n        {alert}\n        {alertAdd}\n        {alertUpdate}\n        {alertDelete}\n        <NavPills\n          color=\"adminDashboard\"\n          tabs={[\n            {\n              tabButton: \"Formations List\",\n              tabIcon: Dashboard,\n              tabContent: (\n                <>\n                  <MaterialTable\n                    title=\"Editable Example\"\n                    columns={state.columns}\n                    icons={tableIcons}\n                    data={state.data}\n                    editable={{\n                      onRowAdd: (newData) =>\n                        new Promise((resolve) => {\n                          resolve();\n                          addFormation(newData);\n                        }),\n                      onRowUpdate: (newData, oldData) =>\n                        new Promise((resolve) => {\n                          resolve();\n                          updateFormation(newData, oldData);\n                        }),\n                      onRowDelete: (oldData) =>\n                        new Promise((resolve) => {\n                          resolve();\n                          deleteFormation(oldData);\n                        }),\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              tabButton: \"Formations Settings\",\n              tabIcon: Schedule,\n              tabContent: (\n                <>\n                  <h1>Empty</h1>\n                </>\n              ),\n            },\n          ]}\n        />\n      </>\n    );\n}\n\nFormationList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(stylesContent)(FormationList);\n"]},"metadata":{},"sourceType":"module"}