{"ast":null,"code":"var _jsxFileName = \"/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/Pages/TestPage/Sections/QuestionTable.js\";\nimport React, { useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { useDispatch } from \"react-redux\";\nimport { tableIcons } from \"../../../tableFeatures/tableIcons\";\nimport { testNiveauPostQuestion, testNiveauGetQuestions, testNiveauDeleteQuestion } from \"../../../../actions/TestNiveauActions\";\nexport default function QuestionTable() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: \"Question number\",\n      field: \"questionNbr\",\n      type: \"numeric\"\n    }, {\n      title: \"Description\",\n      field: \"questionContent\"\n    }, {\n      title: \"First Answer\",\n      field: \"firstAnswer\"\n    }, {\n      title: \"Second Answer\",\n      field: \"secondAnswer\"\n    }, {\n      title: \"Third Answer\",\n      field: \"thirdAnswer\"\n    }, {\n      title: \"Fourth Answer\",\n      field: \"fourthAnswer\"\n    }, {\n      title: \"Difficulty\",\n      field: \"difficulty\",\n      lookup: {\n        1: \"BASIC\",\n        2: \"INTERMEDIATE\",\n        3: \"HARD\",\n        4: \"PROFESSIONAL\"\n      }\n    }, {\n      title: \"Correct Answer\",\n      field: \"correctAnswer\",\n      lookup: {\n        1: \"First Answer\",\n        2: \"Second Answer\",\n        3: \"Third Answer\",\n        4: \"Fourth Answer\"\n      }\n    }],\n    data: []\n  });\n  const dispatch = useDispatch();\n\n  const handleRowAdd = newData => {\n    let questionToAdd = {\n      questionNbr: \"\",\n      questionContent: \"\",\n      answers: [{\n        answerContent: \"\"\n      }, {\n        answerCotnent: \"\"\n      }, {\n        answerContent: \"\"\n      }, {\n        answerContent: \"\"\n      }],\n      difficulty: \"\"\n    };\n    console.log(newData.questionNbr);\n    questionToAdd.questionNbr = newData.questionNbr;\n    questionToAdd.questionContent = newData.questionContent;\n\n    switch (newData.difficulty) {\n      case \"1\":\n        questionToAdd.difficulty = \"BASIC\";\n        break;\n\n      case \"2\":\n        questionToAdd.difficulty = \"INTERMEDIATE\";\n        break;\n\n      case \"3\":\n        questionToAdd.difficulty = \"HARD\";\n        break;\n\n      case \"4\":\n        questionToAdd.difficulty = \"PROFESSIONAL\";\n        break;\n\n      default:\n        break;\n    }\n\n    questionToAdd.answers[0].answerContent = newData.firstAnswer;\n    questionToAdd.answers[1].answerContent = newData.secondAnswer;\n    questionToAdd.answers[2].answerContent = newData.thirdAnswer;\n    questionToAdd.answers[3].answerContent = newData.fourthAnswer;\n    dispatch(testNiveauPostQuestion(questionToAdd)).then(res => {\n      setState(prevState => {\n        const data = [...prevState.data];\n        data.push(newData);\n        return { ...prevState,\n          data\n        };\n      });\n    });\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    dispatch(testNiveauDeleteQuestion(oldData.id)).then(res => {\n      resolve();\n      setState(prevState => {\n        const data = [...prevState.data];\n        data.splice(data.indexOf(oldData), 1);\n        return { ...prevState,\n          data\n        };\n      });\n    });\n  };\n\n  useEffect(() => {\n    dispatch(testNiveauGetQuestions()).then(res => {\n      res.data.map(question => {\n        let newQuestion = {\n          id: \"\",\n          questionNbr: \"\",\n          questionContent: \"\",\n          firstAnswer: \"\",\n          secondAnswer: \"\",\n          thirdAnswer: \"\",\n          fourthAnswer: \"\",\n          difficulty: \"\"\n        };\n\n        switch (question.difficulty) {\n          case \"BASIC\":\n            question.difficulty = 1;\n            break;\n\n          case \"INTERMEDIATE\":\n            question.difficulty = 2;\n            break;\n\n          case \"HARD\":\n            question.difficulty = 3;\n            break;\n\n          case \"PROFESSIONAL\":\n            question.difficulty = 4;\n            break;\n\n          default:\n            break;\n        }\n\n        newQuestion.id = question.id;\n        newQuestion.questionNbr = question.questionNbr;\n        newQuestion.questionContent = question.questionContent;\n        newQuestion.difficulty = question.difficulty;\n        newQuestion.firstAnswer = question.answers[0].answerContent;\n        newQuestion.secondAnswer = question.answers[1].answerContent;\n        newQuestion.thirdAnswer = question.answers[2].answerContent;\n        newQuestion.fourthAnswer = question.answers[3].answerContent;\n        setState(prevState => {\n          const data = [...prevState.data];\n          data.push(newQuestion);\n          return { ...prevState,\n            data\n          };\n        });\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Questions\",\n    columns: state.columns,\n    data: state.data,\n    icons: tableIcons,\n    editable: {\n      onRowAdd: newData => handleRowAdd(newData),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/Pages/TestPage/Sections/QuestionTable.js"],"names":["React","useEffect","MaterialTable","useDispatch","tableIcons","testNiveauPostQuestion","testNiveauGetQuestions","testNiveauDeleteQuestion","QuestionTable","state","setState","useState","columns","title","field","type","lookup","data","dispatch","handleRowAdd","newData","questionToAdd","questionNbr","questionContent","answers","answerContent","answerCotnent","difficulty","console","log","firstAnswer","secondAnswer","thirdAnswer","fourthAnswer","then","res","prevState","push","handleRowDelete","oldData","resolve","id","splice","indexOf","map","question","newQuestion","onRowAdd","onRowUpdate","Promise","setTimeout","onRowDelete"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { useDispatch } from \"react-redux\";\nimport { tableIcons } from \"../../../tableFeatures/tableIcons\";\n\nimport {\n  testNiveauPostQuestion,\n  testNiveauGetQuestions,\n  testNiveauDeleteQuestion,\n} from \"../../../../actions/TestNiveauActions\";\n\nexport default function QuestionTable() {\n  const [state, setState] = React.useState({\n    columns: [\n      { title: \"Question number\", field: \"questionNbr\", type: \"numeric\" },\n      { title: \"Description\", field: \"questionContent\" },\n      { title: \"First Answer\", field: \"firstAnswer\" },\n      { title: \"Second Answer\", field: \"secondAnswer\" },\n      { title: \"Third Answer\", field: \"thirdAnswer\" },\n      { title: \"Fourth Answer\", field: \"fourthAnswer\" },\n      {\n        title: \"Difficulty\",\n        field: \"difficulty\",\n        lookup: { 1: \"BASIC\", 2: \"INTERMEDIATE\", 3: \"HARD\", 4: \"PROFESSIONAL\" },\n      },\n      {\n        title: \"Correct Answer\",\n        field: \"correctAnswer\",\n        lookup: {\n          1: \"First Answer\",\n          2: \"Second Answer\",\n          3: \"Third Answer\",\n          4: \"Fourth Answer\",\n        },\n      },\n    ],\n    data: [],\n  });\n\n  const dispatch = useDispatch();\n\n  const handleRowAdd = (newData) => {\n    let questionToAdd = {\n      questionNbr: \"\",\n      questionContent: \"\",\n      answers: [\n        { answerContent: \"\" },\n        { answerCotnent: \"\" },\n        { answerContent: \"\" },\n        { answerContent: \"\" },\n      ],\n      difficulty: \"\",\n    };\n    console.log(newData.questionNbr);\n    questionToAdd.questionNbr = newData.questionNbr;\n    questionToAdd.questionContent = newData.questionContent;\n\n    switch (newData.difficulty) {\n      case \"1\":\n        questionToAdd.difficulty = \"BASIC\";\n        break;\n      case \"2\":\n        questionToAdd.difficulty = \"INTERMEDIATE\";\n        break;\n      case \"3\":\n        questionToAdd.difficulty = \"HARD\";\n        break;\n      case \"4\":\n        questionToAdd.difficulty = \"PROFESSIONAL\";\n        break;\n      default:\n        break;\n    }\n\n    questionToAdd.answers[0].answerContent = newData.firstAnswer;\n    questionToAdd.answers[1].answerContent = newData.secondAnswer;\n    questionToAdd.answers[2].answerContent = newData.thirdAnswer;\n    questionToAdd.answers[3].answerContent = newData.fourthAnswer;\n\n    dispatch(testNiveauPostQuestion(questionToAdd)).then(res =>{\n      setState((prevState) => {\n        const data = [...prevState.data];\n        data.push(newData);\n        return { ...prevState, data };\n      })\n    })\n\n    \n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    dispatch(testNiveauDeleteQuestion(oldData.id)).then(res => {\n        resolve();\n        setState((prevState) => {\n          const data = [...prevState.data];\n          data.splice(data.indexOf(oldData),1);\n          return { ...prevState, data};\n        })        \n      })\n  };\n\n  useEffect(() => {\n    dispatch(testNiveauGetQuestions()).then((res) => {\n      res.data.map(question => {\n        let newQuestion = {\n          id:\"\",\n          questionNbr: \"\",\n          questionContent: \"\",\n          firstAnswer: \"\",\n          secondAnswer: \"\",\n          thirdAnswer: \"\",\n          fourthAnswer: \"\",\n          difficulty: \"\",\n        };\n\n        switch (question.difficulty) {\n          case \"BASIC\":\n            question.difficulty = 1;\n            break;\n          case \"INTERMEDIATE\":\n            question.difficulty = 2;\n            break;\n          case \"HARD\":\n            question.difficulty = 3;\n            break;\n          case \"PROFESSIONAL\":\n            question.difficulty = 4;\n            break;\n          default:\n            break;\n        }\n\n        newQuestion.id = question.id;\n        newQuestion.questionNbr = question.questionNbr;\n        newQuestion.questionContent = question.questionContent;\n        newQuestion.difficulty = question.difficulty;\n        newQuestion.firstAnswer = question.answers[0].answerContent;\n        newQuestion.secondAnswer = question.answers[1].answerContent;\n        newQuestion.thirdAnswer = question.answers[2].answerContent;\n        newQuestion.fourthAnswer = question.answers[3].answerContent;\n\n        setState((prevState) => {\n          const data = [...prevState.data];\n          data.push(newQuestion);\n          return { ...prevState, data };\n        });\n      })\n\n    });\n  }, []);\n\n  return (\n    <MaterialTable\n      title=\"Questions\"\n      columns={state.columns}\n      data={state.data}\n      icons={tableIcons}\n      editable={{\n        onRowAdd: (newData) => \n        \n          handleRowAdd(newData, )\n        ,\n\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n              if (oldData) {\n                setState((prevState) => {\n                  const data = [...prevState.data];\n                  data[data.indexOf(oldData)] = newData;\n                  return { ...prevState, data };\n                });\n              }\n            }, 600);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n              handleRowDelete(oldData, resolve)\n          }),\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}