{"ast":null,"code":"var _jsxFileName = \"/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/Pages/TestPage/Sections/QuestionTable.js\";\nimport React, { useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { useDispatch } from \"react-redux\";\nimport { tableIcons } from \"../../../tableFeatures/tableIcons\";\nimport { testNiveauPostQuestion, testNiveauGetQuestions, testNiveauDeleteQuestion } from \"../../../../actions/TestNiveauActions\";\nexport default function QuestionTable() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: \"Question number\",\n      field: \"questionNbr\",\n      type: \"numeric\"\n    }, {\n      title: \"Description\",\n      field: \"questionContent\"\n    }, {\n      title: \"First Answer\",\n      field: \"firstAnswer\"\n    }, {\n      title: \"Second Answer\",\n      field: \"secondAnswer\"\n    }, {\n      title: \"Third Answer\",\n      field: \"thirdAnswer\"\n    }, {\n      title: \"Fourth Answer\",\n      field: \"fourthAnswer\"\n    }, {\n      title: \"Difficulty\",\n      field: \"difficulty\",\n      lookup: {\n        1: \"BASIC\",\n        2: \"INTERMEDIATE\",\n        3: \"HARD\",\n        4: \"PROFESSIONAL\"\n      }\n    }, {\n      title: \"Correct Answer\",\n      field: \"correctAnswer\",\n      lookup: {\n        1: \"First Answer\",\n        2: \"Second Answer\",\n        3: \"Third Answer\",\n        4: \"Fourth Answer\"\n      }\n    }],\n    data: []\n  });\n  const dispatch = useDispatch();\n\n  const handleRowAdd = (newData, resolve) => {\n    let questionToAdd = {\n      questionNbr: \"\",\n      questionContent: \"\",\n      answers: [{\n        answer_id: \"0\",\n        answerContent: \"\",\n        correct: false\n      }, {\n        answer_id: \"1\",\n        answerCotnent: \"\",\n        correct: false\n      }, {\n        answer_id: \"2\",\n        answerContent: \"\",\n        correct: false\n      }, {\n        answer_id: \"3\",\n        answerContent: \"\",\n        correct: false\n      }],\n      difficulty: \"\"\n    };\n    questionToAdd.questionNbr = newData.questionNbr;\n    questionToAdd.questionContent = newData.questionContent;\n\n    switch (newData.difficulty) {\n      case \"1\":\n        questionToAdd.difficulty = \"BASIC\";\n        break;\n\n      case \"2\":\n        questionToAdd.difficulty = \"INTERMEDIATE\";\n        break;\n\n      case \"3\":\n        questionToAdd.difficulty = \"HARD\";\n        break;\n\n      case \"4\":\n        questionToAdd.difficulty = \"PROFESSIONAL\";\n        break;\n\n      default:\n        break;\n    }\n\n    questionToAdd.answers[0].answerContent = newData.firstAnswer;\n    questionToAdd.answers[1].answerContent = newData.secondAnswer;\n    questionToAdd.answers[2].answerContent = newData.thirdAnswer;\n    questionToAdd.answers[3].answerContent = newData.fourthAnswer;\n\n    switch (newData.correctAnswer) {\n      case \"1\":\n        questionToAdd.answers[0].correct = \"BASIC\";\n        break;\n\n      case \"2\":\n        questionToAdd.answers[1].correct = \"INTERMEDIATE\";\n        break;\n\n      case \"3\":\n        questionToAdd.answers[2].correct = \"HARD\";\n        break;\n\n      case \"4\":\n        questionToAdd.answers[3].correct = \"PROFESSIONAL\";\n        break;\n\n      default:\n        break;\n    }\n\n    dispatch(testNiveauPostQuestion(questionToAdd)).then(res => {\n      resolve();\n      setState(prevState => {\n        const data = [...prevState.data];\n        data.push(newData);\n        return { ...prevState,\n          data\n        };\n      });\n    });\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    dispatch(testNiveauDeleteQuestion(oldData.id)).then(res => {\n      resolve();\n      setState(prevState => {\n        const data = [...prevState.data];\n        data.splice(data.indexOf(oldData), 1);\n        return { ...prevState,\n          data\n        };\n      });\n    });\n  };\n\n  useEffect(() => {\n    dispatch(testNiveauGetQuestions()).then(res => {\n      res.data.map(question => {\n        let newQuestion = {\n          id: \"\",\n          questionNbr: \"\",\n          questionContent: \"\",\n          firstAnswer: \"\",\n          secondAnswer: \"\",\n          thirdAnswer: \"\",\n          fourthAnswer: \"\",\n          difficulty: \"\"\n        };\n\n        switch (question.difficulty) {\n          case \"BASIC\":\n            question.difficulty = 1;\n            break;\n\n          case \"INTERMEDIATE\":\n            question.difficulty = 2;\n            break;\n\n          case \"HARD\":\n            question.difficulty = 3;\n            break;\n\n          case \"PROFESSIONAL\":\n            question.difficulty = 4;\n            break;\n\n          default:\n            break;\n        }\n\n        newQuestion.id = question.id;\n        newQuestion.questionNbr = question.questionNbr;\n        newQuestion.questionContent = question.questionContent;\n        newQuestion.difficulty = question.difficulty;\n        newQuestion.firstAnswer = question.answers[0].answerContent;\n        newQuestion.secondAnswer = question.answers[1].answerContent;\n        newQuestion.thirdAnswer = question.answers[2].answerContent;\n        newQuestion.fourthAnswer = question.answers[3].answerContent;\n        setState(prevState => {\n          const data = [...prevState.data];\n          data.push(newQuestion);\n          return { ...prevState,\n            data\n          };\n        });\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Questions\",\n    columns: state.columns,\n    data: state.data,\n    icons: tableIcons,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        handleRowAdd(newData, resolve);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/Pages/TestPage/Sections/QuestionTable.js"],"names":["React","useEffect","MaterialTable","useDispatch","tableIcons","testNiveauPostQuestion","testNiveauGetQuestions","testNiveauDeleteQuestion","QuestionTable","state","setState","useState","columns","title","field","type","lookup","data","dispatch","handleRowAdd","newData","resolve","questionToAdd","questionNbr","questionContent","answers","answer_id","answerContent","correct","answerCotnent","difficulty","firstAnswer","secondAnswer","thirdAnswer","fourthAnswer","correctAnswer","then","res","prevState","push","handleRowDelete","oldData","id","splice","indexOf","map","question","newQuestion","onRowAdd","Promise","onRowUpdate","setTimeout","onRowDelete"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { useDispatch } from \"react-redux\";\nimport { tableIcons } from \"../../../tableFeatures/tableIcons\";\n\nimport {\n  testNiveauPostQuestion,\n  testNiveauGetQuestions,\n  testNiveauDeleteQuestion,\n} from \"../../../../actions/TestNiveauActions\";\n\nexport default function QuestionTable() {\n  const [state, setState] = React.useState({\n    columns: [\n      { title: \"Question number\", field: \"questionNbr\", type: \"numeric\" },\n      { title: \"Description\", field: \"questionContent\" },\n      { title: \"First Answer\", field: \"firstAnswer\" },\n      { title: \"Second Answer\", field: \"secondAnswer\" },\n      { title: \"Third Answer\", field: \"thirdAnswer\" },\n      { title: \"Fourth Answer\", field: \"fourthAnswer\" },\n      {\n        title: \"Difficulty\",\n        field: \"difficulty\",\n        lookup: { 1: \"BASIC\", 2: \"INTERMEDIATE\", 3: \"HARD\", 4: \"PROFESSIONAL\" },\n      },\n      {\n        title: \"Correct Answer\",\n        field: \"correctAnswer\",\n        lookup: {\n          1: \"First Answer\",\n          2: \"Second Answer\",\n          3: \"Third Answer\",\n          4: \"Fourth Answer\",\n        },\n      },\n    ],\n    data: [],\n  });\n\n  const dispatch = useDispatch();\n\n  const handleRowAdd = (newData, resolve) => {\n    let questionToAdd = {\n      questionNbr: \"\",\n      questionContent: \"\",\n      answers: [\n        { answer_id: \"0\", answerContent: \"\", correct:false },\n        { answer_id: \"1\", answerCotnent: \"\", correct:false },\n        { answer_id: \"2\", answerContent: \"\", correct:false },\n        { answer_id: \"3\", answerContent: \"\", correct:false },\n      ],\n      difficulty: \"\",\n    };\n\n    questionToAdd.questionNbr = newData.questionNbr;\n    questionToAdd.questionContent = newData.questionContent;\n\n    switch (newData.difficulty) {\n      case \"1\":\n        questionToAdd.difficulty = \"BASIC\";\n        break;\n      case \"2\":\n        questionToAdd.difficulty = \"INTERMEDIATE\";\n        break;\n      case \"3\":\n        questionToAdd.difficulty = \"HARD\";\n        break;\n      case \"4\":\n        questionToAdd.difficulty = \"PROFESSIONAL\";\n        break;\n      default:\n        break;\n    }\n\n    questionToAdd.answers[0].answerContent = newData.firstAnswer;\n    questionToAdd.answers[1].answerContent = newData.secondAnswer;\n    questionToAdd.answers[2].answerContent = newData.thirdAnswer;\n    questionToAdd.answers[3].answerContent = newData.fourthAnswer;\n\n    switch (newData.correctAnswer) {\n      case \"1\":\n        questionToAdd.answers[0].correct = \"BASIC\";\n        break;\n      case \"2\":\n        questionToAdd.answers[1].correct = \"INTERMEDIATE\";\n        break;\n      case \"3\":\n        questionToAdd.answers[2].correct = \"HARD\";\n        break;\n      case \"4\":\n        questionToAdd.answers[3].correct = \"PROFESSIONAL\";\n        break;\n      default:\n        break;\n    }\n\n    dispatch(testNiveauPostQuestion(questionToAdd)).then(res =>{\n      resolve();\n      setState((prevState) => {\n        const data = [...prevState.data];\n        data.push(newData);\n        return { ...prevState, data };\n      })\n    })\n\n    \n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    dispatch(testNiveauDeleteQuestion(oldData.id)).then(res => {\n        resolve();\n        setState((prevState) => {\n          const data = [...prevState.data];\n          data.splice(data.indexOf(oldData),1);\n          return { ...prevState, data};\n        })        \n      })\n  };\n\n  useEffect(() => {\n    dispatch(testNiveauGetQuestions()).then((res) => {\n      res.data.map(question => {\n        let newQuestion = {\n          id:\"\",\n          questionNbr: \"\",\n          questionContent: \"\",\n          firstAnswer: \"\",\n          secondAnswer: \"\",\n          thirdAnswer: \"\",\n          fourthAnswer: \"\",\n          difficulty: \"\",\n        };\n\n        switch (question.difficulty) {\n          case \"BASIC\":\n            question.difficulty = 1;\n            break;\n          case \"INTERMEDIATE\":\n            question.difficulty = 2;\n            break;\n          case \"HARD\":\n            question.difficulty = 3;\n            break;\n          case \"PROFESSIONAL\":\n            question.difficulty = 4;\n            break;\n          default:\n            break;\n        }\n\n        newQuestion.id = question.id;\n        newQuestion.questionNbr = question.questionNbr;\n        newQuestion.questionContent = question.questionContent;\n        newQuestion.difficulty = question.difficulty;\n        newQuestion.firstAnswer = question.answers[0].answerContent;\n        newQuestion.secondAnswer = question.answers[1].answerContent;\n        newQuestion.thirdAnswer = question.answers[2].answerContent;\n        newQuestion.fourthAnswer = question.answers[3].answerContent;\n\n        setState((prevState) => {\n          const data = [...prevState.data];\n          data.push(newQuestion);\n          return { ...prevState, data };\n        });\n      })\n\n    });\n  }, []);\n\n  return (\n    <MaterialTable\n      title=\"Questions\"\n      columns={state.columns}\n      data={state.data}\n      icons={tableIcons}\n      editable={{\n        onRowAdd: (newData) => \n        new Promise((resolve) => {\n          handleRowAdd(newData, resolve)\n        }),\n\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve();\n              if (oldData) {\n                setState((prevState) => {\n                  const data = [...prevState.data];\n                  data[data.indexOf(oldData)] = newData;\n                  return { ...prevState, data };\n                });\n              }\n            }, 600);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n              handleRowDelete(oldData, resolve)\n          }),\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}