{"ast":null,"code":"var _jsxFileName = \"/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/Pages/TestPage/Sections/QuestionTable.js\";\nimport React, { useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { useDispatch } from \"react-redux\";\nimport { tableIcons } from \"../../../tableFeatures/tableIcons\";\nimport { testNiveauPostQuestion, testNiveauGetQuestions, testNiveauDeleteQuestion, testNiveauUpdateQuestion } from \"../../../../actions/TestNiveauActions\";\nimport { size } from \"lodash\";\nexport default function QuestionTable() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: \"Question number\",\n      field: \"questionNbr\",\n      type: \"numeric\"\n    }, {\n      title: \"Description\",\n      field: \"questionContent\"\n    }, {\n      title: \"First Answer\",\n      field: \"firstAnswer\"\n    }, {\n      title: \"Second Answer\",\n      field: \"secondAnswer\"\n    }, {\n      title: \"Third Answer\",\n      field: \"thirdAnswer\"\n    }, {\n      title: \"Fourth Answer\",\n      field: \"fourthAnswer\"\n    }, {\n      title: \"Difficulty\",\n      field: \"difficulty\",\n      lookup: {\n        1: \"BASIC\",\n        2: \"INTERMEDIATE\",\n        3: \"HARD\",\n        4: \"PROFESSIONAL\"\n      }\n    }, {\n      title: \"Correct Answer\",\n      field: \"correctAnswer\",\n      lookup: {\n        1: \"First Answer\",\n        2: \"Second Answer\",\n        3: \"Third Answer\",\n        4: \"Fourth Answer\"\n      }\n    }],\n    data: []\n  });\n  const dispatch = useDispatch();\n\n  const handleRowAdd = (newData, resolve) => {\n    let questionToAdd = {\n      questionNbr: \"\",\n      questionContent: \"\",\n      answers: [{\n        answer_id: \"0\",\n        answerContent: \"\",\n        correct: false\n      }, {\n        answer_id: \"1\",\n        answerCotnent: \"\",\n        correct: false\n      }, {\n        answer_id: \"2\",\n        answerContent: \"\",\n        correct: false\n      }, {\n        answer_id: \"3\",\n        answerContent: \"\",\n        correct: false\n      }],\n      difficulty: \"\"\n    };\n    questionToAdd.questionNbr = newData.questionNbr;\n    questionToAdd.questionContent = newData.questionContent;\n\n    switch (newData.difficulty) {\n      case \"1\":\n        questionToAdd.difficulty = \"BASIC\";\n        break;\n\n      case \"2\":\n        questionToAdd.difficulty = \"INTERMEDIATE\";\n        break;\n\n      case \"3\":\n        questionToAdd.difficulty = \"HARD\";\n        break;\n\n      case \"4\":\n        questionToAdd.difficulty = \"PROFESSIONAL\";\n        break;\n\n      default:\n        break;\n    }\n\n    questionToAdd.answers[0].answerContent = newData.firstAnswer;\n    questionToAdd.answers[1].answerContent = newData.secondAnswer;\n    questionToAdd.answers[2].answerContent = newData.thirdAnswer;\n    questionToAdd.answers[3].answerContent = newData.fourthAnswer;\n\n    switch (newData.correctAnswer) {\n      case \"1\":\n        questionToAdd.answers[0].correct = true;\n        break;\n\n      case \"2\":\n        questionToAdd.answers[1].correct = true;\n        break;\n\n      case \"3\":\n        questionToAdd.answers[2].correct = true;\n        break;\n\n      case \"4\":\n        questionToAdd.answers[3].correct = true;\n        break;\n\n      default:\n        break;\n    }\n\n    dispatch(testNiveauPostQuestion(questionToAdd)).then(res => {\n      resolve();\n      setState(prevState => {\n        const data = [...prevState.data];\n        data.push(newData);\n        return { ...prevState,\n          data\n        };\n      });\n    });\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    dispatch(testNiveauDeleteQuestion(oldData.id)).then(res => {\n      resolve();\n      setState(prevState => {\n        const data = [...prevState.data];\n        data.splice(data.indexOf(oldData), 1);\n        return { ...prevState,\n          data\n        };\n      });\n    });\n  };\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    console.log(newData);\n    let questionToSend = {\n      id: oldData.id,\n      questionNbr: newData.questionNbr,\n      questionContent: newData.questionContent,\n      answers: [{\n        answer_id: \"0\",\n        answerContent: newData.firstAnswer,\n        correct: false\n      }, {\n        answer_id: \"1\",\n        answerContent: newData.secondAnswer,\n        correct: false\n      }, {\n        answer_id: \"2\",\n        answerContent: newData.thirdAnswer,\n        correct: false\n      }, {\n        answer_id: \"3\",\n        answerContent: newData.fourthAnswer,\n        correct: false\n      }],\n      difficulty: \"\"\n    };\n\n    switch (newData.difficulty) {\n      case 1:\n        questionToSend.difficulty = \"BASIC\";\n        break;\n\n      case 2:\n        questionToSend.difficulty = \"INTERMEDIATE\";\n        break;\n\n      case 3:\n        questionToSend.difficulty = \"HARD\";\n        break;\n\n      case 4:\n        questionToSend.difficulty = \"PROFESSIONAL\";\n        break;\n\n      default:\n        break;\n    }\n\n    dispatch(testNiveauUpdateQuestion(oldData.id, questionToSend)).then(res => {\n      resolve();\n\n      if (oldData) {\n        setState(prevState => {\n          const data = [...prevState.data];\n          data[data.indexOf(oldData)] = newData;\n          return { ...prevState,\n            data\n          };\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    dispatch(testNiveauGetQuestions()).then(res => {\n      if (size(res) !== 0) {\n        res.data.foreach(question => {\n          let newQuestion = {\n            id: \"\",\n            questionNbr: \"\",\n            questionContent: \"\",\n            firstAnswer: \"\",\n            secondAnswer: \"\",\n            thirdAnswer: \"\",\n            fourthAnswer: \"\",\n            difficulty: \"\"\n          };\n\n          switch (question.difficulty) {\n            case \"BASIC\":\n              question.difficulty = 1;\n              break;\n\n            case \"INTERMEDIATE\":\n              question.difficulty = 2;\n              break;\n\n            case \"HARD\":\n              question.difficulty = 3;\n              break;\n\n            case \"PROFESSIONAL\":\n              question.difficulty = 4;\n              break;\n\n            default:\n              break;\n          }\n\n          newQuestion.id = question.id;\n          newQuestion.questionNbr = question.questionNbr;\n          newQuestion.questionContent = question.questionContent;\n          newQuestion.difficulty = question.difficulty;\n          newQuestion.firstAnswer = question.answers[0].answerContent;\n          newQuestion.secondAnswer = question.answers[1].answerContent;\n          newQuestion.thirdAnswer = question.answers[2].answerContent;\n          newQuestion.fourthAnswer = question.answers[3].answerContent;\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newQuestion);\n            return { ...prevState,\n              data\n            };\n          });\n        });\n      } else {}\n    });\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Questions\",\n    columns: state.columns,\n    data: state.data,\n    icons: tableIcons,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        handleRowAdd(newData, resolve);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        handleRowUpdate(newData, oldData, resolve);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/home/medamine/Desktop/Plateforme-de-gestion-de-carrieres-et-de-formations/frontend/src/containers/Pages/TestPage/Sections/QuestionTable.js"],"names":["React","useEffect","MaterialTable","useDispatch","tableIcons","testNiveauPostQuestion","testNiveauGetQuestions","testNiveauDeleteQuestion","testNiveauUpdateQuestion","size","QuestionTable","state","setState","useState","columns","title","field","type","lookup","data","dispatch","handleRowAdd","newData","resolve","questionToAdd","questionNbr","questionContent","answers","answer_id","answerContent","correct","answerCotnent","difficulty","firstAnswer","secondAnswer","thirdAnswer","fourthAnswer","correctAnswer","then","res","prevState","push","handleRowDelete","oldData","id","splice","indexOf","handleRowUpdate","console","log","questionToSend","foreach","question","newQuestion","onRowAdd","Promise","onRowUpdate","onRowDelete"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { useDispatch } from \"react-redux\";\nimport { tableIcons } from \"../../../tableFeatures/tableIcons\";\n\nimport {\n  testNiveauPostQuestion,\n  testNiveauGetQuestions,\n  testNiveauDeleteQuestion,\n  testNiveauUpdateQuestion,\n} from \"../../../../actions/TestNiveauActions\";\nimport { size } from \"lodash\";\n\nexport default function QuestionTable() {\n  const [state, setState] = React.useState({\n    columns: [\n      { title: \"Question number\", field: \"questionNbr\", type: \"numeric\" },\n      { title: \"Description\", field: \"questionContent\" },\n      { title: \"First Answer\", field: \"firstAnswer\" },\n      { title: \"Second Answer\", field: \"secondAnswer\" },\n      { title: \"Third Answer\", field: \"thirdAnswer\" },\n      { title: \"Fourth Answer\", field: \"fourthAnswer\" },\n      {\n        title: \"Difficulty\",\n        field: \"difficulty\",\n        lookup: { 1: \"BASIC\", 2: \"INTERMEDIATE\", 3: \"HARD\", 4: \"PROFESSIONAL\" },\n      },\n      {\n        title: \"Correct Answer\",\n        field: \"correctAnswer\",\n        lookup: {\n          1: \"First Answer\",\n          2: \"Second Answer\",\n          3: \"Third Answer\",\n          4: \"Fourth Answer\",\n        },\n      },\n    ],\n    data: [],\n  });\n\n  const dispatch = useDispatch();\n\n  const handleRowAdd = (newData, resolve) => {\n    let questionToAdd = {\n      questionNbr: \"\",\n      questionContent: \"\",\n      answers: [\n        { answer_id: \"0\", answerContent: \"\", correct: false },\n        { answer_id: \"1\", answerCotnent: \"\", correct: false },\n        { answer_id: \"2\", answerContent: \"\", correct: false },\n        { answer_id: \"3\", answerContent: \"\", correct: false },\n      ],\n      difficulty: \"\",\n    };\n\n    questionToAdd.questionNbr = newData.questionNbr;\n    questionToAdd.questionContent = newData.questionContent;\n\n    switch (newData.difficulty) {\n      case \"1\":\n        questionToAdd.difficulty = \"BASIC\";\n        break;\n      case \"2\":\n        questionToAdd.difficulty = \"INTERMEDIATE\";\n        break;\n      case \"3\":\n        questionToAdd.difficulty = \"HARD\";\n        break;\n      case \"4\":\n        questionToAdd.difficulty = \"PROFESSIONAL\";\n        break;\n      default:\n        break;\n    }\n\n    questionToAdd.answers[0].answerContent = newData.firstAnswer;\n    questionToAdd.answers[1].answerContent = newData.secondAnswer;\n    questionToAdd.answers[2].answerContent = newData.thirdAnswer;\n    questionToAdd.answers[3].answerContent = newData.fourthAnswer;\n\n    switch (newData.correctAnswer) {\n      case \"1\":\n        questionToAdd.answers[0].correct = true;\n        break;\n      case \"2\":\n        questionToAdd.answers[1].correct = true;\n        break;\n      case \"3\":\n        questionToAdd.answers[2].correct = true;\n        break;\n      case \"4\":\n        questionToAdd.answers[3].correct = true;\n        break;\n      default:\n        break;\n    }\n\n    dispatch(testNiveauPostQuestion(questionToAdd)).then(res => {\n      resolve();\n      setState((prevState) => {\n        const data = [...prevState.data];\n        data.push(newData);\n        return { ...prevState, data };\n      })\n    })\n\n\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    dispatch(testNiveauDeleteQuestion(oldData.id)).then(res => {\n      resolve();\n      setState((prevState) => {\n        const data = [...prevState.data];\n        data.splice(data.indexOf(oldData), 1);\n        return { ...prevState, data };\n      })\n    })\n  };\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    \n    console.log(newData)\n    \n    let questionToSend = {\n      id: oldData.id,\n      questionNbr: newData.questionNbr,\n      questionContent: newData.questionContent,\n      answers: [\n        { answer_id: \"0\", answerContent: newData.firstAnswer, correct: false },\n        { answer_id: \"1\", answerContent: newData.secondAnswer, correct: false },\n        { answer_id: \"2\", answerContent: newData.thirdAnswer, correct: false },\n        { answer_id: \"3\", answerContent: newData.fourthAnswer, correct: false },\n      ],\n      difficulty: \"\",\n    };\n\n    switch (newData.difficulty) {\n      case 1:\n        questionToSend.difficulty = \"BASIC\";\n        break;\n      case 2:\n        questionToSend.difficulty = \"INTERMEDIATE\";\n        break;\n      case 3:\n        questionToSend.difficulty = \"HARD\";\n        break;\n      case 4:\n        questionToSend.difficulty = \"PROFESSIONAL\";\n        break;\n      default:\n        break;\n    }\n\n    dispatch(testNiveauUpdateQuestion(oldData.id, questionToSend)).then(res => {\n      resolve();\n      if (oldData) {\n        setState((prevState) => {\n          const data = [...prevState.data];\n          data[data.indexOf(oldData)] = newData;\n          return { ...prevState, data };\n        });\n      }\n    })\n  }\n\n  useEffect(() => {\n    dispatch(testNiveauGetQuestions()).then(res => {\n      if(size(res) !== 0){\n        res.data.foreach(question => {\n          let newQuestion = {\n            id: \"\",\n            questionNbr: \"\",\n            questionContent: \"\",\n            firstAnswer: \"\",\n            secondAnswer: \"\",\n            thirdAnswer: \"\",\n            fourthAnswer: \"\",\n            difficulty: \"\",\n          };\n  \n          switch (question.difficulty) {\n            case \"BASIC\":\n              question.difficulty = 1;\n              break;\n            case \"INTERMEDIATE\":\n              question.difficulty = 2;\n              break;\n            case \"HARD\":\n              question.difficulty = 3;\n              break;\n            case \"PROFESSIONAL\":\n              question.difficulty = 4;\n              break;\n            default:\n              break;\n          }\n  \n          newQuestion.id = question.id;\n          newQuestion.questionNbr = question.questionNbr;\n          newQuestion.questionContent = question.questionContent;\n          newQuestion.difficulty = question.difficulty;\n          newQuestion.firstAnswer = question.answers[0].answerContent;\n          newQuestion.secondAnswer = question.answers[1].answerContent;\n          newQuestion.thirdAnswer = question.answers[2].answerContent;\n          newQuestion.fourthAnswer = question.answers[3].answerContent;\n  \n          setState((prevState) => {\n            const data = [...prevState.data];\n            data.push(newQuestion);\n            return { ...prevState, data };\n          });\n          \n        })\n  \n      }else{\n        \n      }\n      \n      \n    });\n  }, [dispatch]);\n\n  return (\n    <MaterialTable\n      title=\"Questions\"\n      columns={state.columns}\n      data={state.data}\n      icons={tableIcons}\n      editable={{\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            handleRowAdd(newData, resolve)\n          }),\n\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            handleRowUpdate(newData, oldData, resolve)\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            handleRowDelete(oldData, resolve)\n          }),\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}